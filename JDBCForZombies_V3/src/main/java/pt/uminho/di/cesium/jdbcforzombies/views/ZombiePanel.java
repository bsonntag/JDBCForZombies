/*
 * Copyright (c) 2014 Benjamim Sonntag
 * 
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package pt.uminho.di.cesium.jdbcforzombies.views;

import java.awt.Dimension;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import pt.uminho.di.cesium.jdbcforzombies.models.Zombie;
import pt.uminho.di.cesium.jdbcforzombies.persistence.PersistenceException;
import pt.uminho.di.cesium.jdbcforzombies.persistence.RepositoryFactory;
import pt.uminho.di.cesium.jdbcforzombies.persistence.ZombieRepository;

/**
 * ZombiePanel
 *
 * @author Benjamim Sonntag
 */
public class ZombiePanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 8930137921728543427L;
    
    private final ZombieRepository zombieRepository;
    
    private final ZombieTableModel tableModel;

    /**
     * Creates new form ZombiePanel
     */
    public ZombiePanel() {
        initComponents();
        jTable1.setPreferredScrollableViewportSize(new Dimension(500, 70));
        jTable1.setFillsViewportHeight(true);
        tableModel = (ZombieTableModel)jTable1.getModel();
        
        zombieRepository = RepositoryFactory.getZombieRepository();
        try {
            Iterable<Zombie> zombies = zombieRepository.findAll();
            for(Zombie zombie : zombies) {
                System.out.println(zombie);
                tableModel.addRow(zombie);
            }
        }
        catch (PersistenceException ex) {
            ex.printStackTrace();
        }
        
        jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(e.getValueIsAdjusting() == false) {
                    boolean enable = e.getFirstIndex() >= 0;
                    updateZombieButton.setEnabled(enable);
                    removeZombieButton.setEnabled(enable);
                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        addZombieButton = new javax.swing.JButton();
        updateZombieButton = new javax.swing.JButton();
        removeZombieButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(200, 200));

        jTextField1.setNextFocusableComponent(jTextField2);

        jLabel1.setText("Name");

        jLabel2.setText("Graveyard");

        jTextField2.setNextFocusableComponent(addZombieButton);

        addZombieButton.setText("Add Zombie");
        addZombieButton.setNextFocusableComponent(updateZombieButton);
        addZombieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addZombieButtonActionPerformed(evt);
            }
        });

        updateZombieButton.setText("Update Zombie");
        updateZombieButton.setEnabled(false);
        updateZombieButton.setNextFocusableComponent(jTextField1);
        updateZombieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateZombieButtonActionPerformed(evt);
            }
        });

        removeZombieButton.setText("Remove Zombie");
        removeZombieButton.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addZombieButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateZombieButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeZombieButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addZombieButton)
                    .addComponent(updateZombieButton)
                    .addComponent(removeZombieButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTable1.setModel(new ZombieTableModel());
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addZombieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addZombieButtonActionPerformed
        String name = jTextField1.getText();
        String graveyard = jTextField2.getText();
        if(name.isEmpty() == false && graveyard.isEmpty() == false) {
            Zombie z = new Zombie(name, graveyard);
            try {
                zombieRepository.save(z);
                tableModel.addRow(z);
            }
            catch (PersistenceException ex) {
                ex.printStackTrace();
            }
            jTextField1.setText("");
            jTextField2.setText("");
        }
    }//GEN-LAST:event_addZombieButtonActionPerformed

    private void updateZombieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateZombieButtonActionPerformed
        // TODO Update the selected zombie
    }//GEN-LAST:event_updateZombieButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addZombieButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton removeZombieButton;
    private javax.swing.JButton updateZombieButton;
    // End of variables declaration//GEN-END:variables
}
