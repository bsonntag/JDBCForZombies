/*
 * Copyright (c) 2014 Benjamim Sonntag
 * 
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package pt.uminho.di.cesium.jdbcforzombies.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import pt.uminho.di.cesium.jdbcforzombies.models.Tweet;
import pt.uminho.di.cesium.jdbcforzombies.models.Zombie;

/**
 * TweetRepository
 *
 * @author Benjamim Sonntag
 */
public class TweetRepository extends AbstractRepository<Tweet> {
    
    private static final String SELECT_TWEETS = "select id, zombie_id, text, pub_date from tweets";
    private static final String SELECT_TWEET = "select id, zombie_id, text, pub_date from tweets where id = ?";
    private static final String SELECT_BY_ZOMBIE = "select id, text, pub_date from tweets where zombie_id = ?";
    
    private static final String INSERT_TWEET = "insert into tweets (zombie_id, text, pub_date) values (?, ?, ?)";
    private static final String UPDATE_TWEET = "update tweets set text = ? where id = ?";
    
    private static final String DELETE_TWEET = "delete from tweets where id = ?";
    private static final String DELETE_TWEETS = "delete from tweets";
    
    private static final String COUNT_TWEETS = "select count(*) as n from tweets";
    
    
    private final String url;
    private final String user;
    private final String password;
    
    private final ZombieRepository zombieRepository;

    TweetRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
        
        this.zombieRepository = RepositoryFactory.getZombieRepository();
    }

    @Override
    public void save(Tweet tweet) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        if(tweet.getId() < 0) {
            query = INSERT_TWEET;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            query = UPDATE_TWEET;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }
        
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);
            
            statement.setLong(1, tweet.getZombie().getId());
            statement.setString(2, tweet.getText());
            java.sql.Date date = new java.sql.Date(tweet.getPublishDate().getTime());
            statement.setDate(3, date);
            
            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();
            
            try {
                if(autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS && keys.next()) {
                    tweet.setId(keys.getLong(1));
                }
                else {
                    throw new PersistenceException("Error generating id for tweet: " + tweet);
                }
            }
            finally {
                keys.close();
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error saving tweet: " + tweet, ex);
        }
    }

    @Override
    public Tweet find(long id) throws PersistenceException {
        try {
            Tweet tweet;
            
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_TWEET);
            statement.setLong(1, id);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    tweet = new Tweet();
                    tweet.setId(result.getLong("id"));
                    tweet.setText(result.getString("text"));

                    java.util.Date date = new java.util.Date(result.getDate("pub_date").getTime());
                    tweet.setPublishDate(date);

                    long zombie_id = result.getLong("zombie_id");
                    tweet.setZombie(zombieRepository.find(zombie_id));
                }
                else {
                    tweet = null;
                }
            }
            finally {
                result.close();
                statement.close();
                connection.close();
            }
            
            return tweet;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching tweets", ex);
        }
    }

    @Override
    public Iterable<Tweet> findAll() throws PersistenceException {
        try {
            List<Tweet> tweets = new ArrayList<>();
            
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_TWEETS);
            
            try {
                while(result.next()) {
                    Tweet t = new Tweet();
                    t.setId(result.getLong("id"));
                    t.setText(result.getString("text"));

                    java.util.Date date = new java.util.Date(result.getDate("pub_date").getTime());
                    t.setPublishDate(date);

                    long zombie_id = result.getLong("zombie_id");
                    t.setZombie(zombieRepository.find(zombie_id));

                    tweets.add(t);
                }
            }
            finally {
                result.close();
                statement.close();
                connection.close();
            }
            
            return tweets;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching tweets", ex);
        }
    }

    @Override
    public void delete(Tweet tweet) throws PersistenceException {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_TWEET);
            
            statement.setLong(1, tweet.getId());
            
            try {
                statement.executeUpdate();
                tweet.getZombie().removeTweet(tweet);
                tweet.setId(-1);
            }
            finally {
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting tweet: " + tweet, ex);
        }
    }

    @Override
    public void deleteAll() throws PersistenceException {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_TWEETS);
            
            try {
                statement.executeUpdate();
            }
            finally {
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting tweets", ex);
        }
    }

    @Override
    public long count() throws PersistenceException {
        try {
            int count;
            
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(COUNT_TWEETS);

            try {
                count = result.getInt("n");
            }
            finally {
                statement.close();
                connection.close();
            }
            
            return count;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting zombies", ex);
        }
    }
    
    
    public Iterable<Tweet> findByZombie(Zombie zombie) throws PersistenceException {
        try {
            List<Tweet> tweets = new ArrayList<>();
            
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_BY_ZOMBIE);
            statement.setLong(1, zombie.getId());
            ResultSet result = statement.executeQuery();
            
            try {
                while(result.next()) {
                    Tweet tweet = new Tweet();
                    tweet.setId(result.getLong("id"));
                    tweet.setText(result.getString("text"));

                    java.util.Date date = new java.util.Date(result.getDate("pub_date").getTime());
                    tweet.setPublishDate(date);
                    
                    tweet.setZombie(zombie);
                    
                    tweets.add(tweet);
                    zombie.addTweet(tweet);
                }
            }
            finally {
                result.close();
                statement.close();
                connection.close();
            }
            
            return tweets;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching tweets", ex);
        }
    }
    
}
